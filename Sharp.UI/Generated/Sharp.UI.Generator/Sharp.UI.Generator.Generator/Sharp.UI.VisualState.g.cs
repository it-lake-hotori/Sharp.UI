//
// <auto-generated>
//

#pragma warning disable CS8669


using System.Collections;
using System.Collections.ObjectModel;


namespace Sharp.UI
{  
    /// <summary>
    /// A <c>Sharp.UI</c> class inheriting from the <c>Microsoft.Maui.Controls.VisualState</c> class.
    /// </summary>
    public partial class VisualState : Microsoft.Maui.Controls.VisualState, Sharp.UI.IVisualState, IMauiWrapper, IList<Microsoft.Maui.Controls.Setter>
    {
        // ----- maui object -----

        public Sharp.UI.VisualState MauiObject { get => this; }

        // ----- constructors -----

        public VisualState(out VisualState visualState) : this()
        {
            visualState = this;
        }

        public VisualState(System.Action<VisualState> configure) : this()
        {
            configure(this);
        }

        public VisualState(out VisualState visualState, System.Action<VisualState> configure) : this()
        {
            visualState = this;
            configure(this);
        }

        public VisualState(string name, out VisualState visualState) : this(name)
        {
            visualState = this;
        }

        public VisualState(string name, System.Action<VisualState> configure) : this(name)
        {
            configure(this);
        }

        public VisualState(string name, out VisualState visualState, System.Action<VisualState> configure) : this(name)
        {
            visualState = this;
            configure(this);
        }

        // ----- collection container -----

        public int Count => this.Setters.Count;
        public Microsoft.Maui.Controls.Setter this[int index] { get => this.Setters[index]; set => this.Setters[index] = value; }
        public bool IsReadOnly => false;
        public void Add(Microsoft.Maui.Controls.Setter item) => this.Setters.Add(item);
        public void Clear() => this.Setters.Clear();
        public bool Contains(Microsoft.Maui.Controls.Setter item) => this.Setters.Contains(item);
        public void CopyTo(Microsoft.Maui.Controls.Setter[] array, int arrayIndex) => this.Setters.CopyTo(array, arrayIndex);
        public IEnumerator<Microsoft.Maui.Controls.Setter> GetEnumerator() => this.Setters.GetEnumerator();
        public int IndexOf(Microsoft.Maui.Controls.Setter item) => this.Setters.IndexOf(item);
        public void Insert(int index, Microsoft.Maui.Controls.Setter item) => this.Setters.Insert(index, item);
        public bool Remove(Microsoft.Maui.Controls.Setter item) => this.Setters.Remove(item);
        public void RemoveAt(int index) => this.Setters.RemoveAt(index);
        IEnumerator IEnumerable.GetEnumerator() => this.Setters.GetEnumerator();

        // ----- properties / events -----


    }
}

#pragma warning restore CS8669
