//
// <auto-generated>
//

#pragma warning disable CS8669


using System.Collections;
using System.Collections.ObjectModel;


namespace Sharp.UI
{  
    /// <summary>
    /// A <c>Sharp.UI</c> class inheriting from the <c>Microsoft.Maui.Controls.Shapes.Polyline</c> class.
    /// </summary>
    public partial class Polyline : Microsoft.Maui.Controls.Shapes.Polyline, Sharp.UI.IPolyline, IMauiWrapper, IList<Microsoft.Maui.Graphics.Point>
    {
        // ----- maui object -----

        public Sharp.UI.Polyline MauiObject { get => this; }

        // ----- constructors -----

        public Polyline() { }

        public Polyline(out Polyline polyline) 
        {
            polyline = this;
        }

        public Polyline(System.Action<Polyline> configure) 
        {
            configure(this);
        }

        public Polyline(out Polyline polyline, System.Action<Polyline> configure) 
        {
            polyline = this;
            configure(this);
        }

        // ----- collection container -----

        public int Count => this.Points.Count;
        public Microsoft.Maui.Graphics.Point this[int index] { get => this.Points[index]; set => this.Points[index] = value; }
        public bool IsReadOnly => false;
        public void Add(Microsoft.Maui.Graphics.Point item) => this.Points.Add(item);
        public void Clear() => this.Points.Clear();
        public bool Contains(Microsoft.Maui.Graphics.Point item) => this.Points.Contains(item);
        public void CopyTo(Microsoft.Maui.Graphics.Point[] array, int arrayIndex) => this.Points.CopyTo(array, arrayIndex);
        public IEnumerator<Microsoft.Maui.Graphics.Point> GetEnumerator() => this.Points.GetEnumerator();
        public int IndexOf(Microsoft.Maui.Graphics.Point item) => this.Points.IndexOf(item);
        public void Insert(int index, Microsoft.Maui.Graphics.Point item) => this.Points.Insert(index, item);
        public bool Remove(Microsoft.Maui.Graphics.Point item) => this.Points.Remove(item);
        public void RemoveAt(int index) => this.Points.RemoveAt(index);
        IEnumerator IEnumerable.GetEnumerator() => this.Points.GetEnumerator();

        // ----- properties / events -----

        public new object BindingContext { get => base.BindingContext; set => base.BindingContext = MauiWrapper.Value<object>(value); }

        // ----- set value method -----

        public new void SetValue(Microsoft.Maui.Controls.BindableProperty property, object value)
        {
            var mauiValue = MauiWrapper.Value<object>(value);
            ((Microsoft.Maui.Controls.BindableObject)this).SetValue(property, mauiValue);
        }

        public new void SetValue(Microsoft.Maui.Controls.BindablePropertyKey propertyKey, object value)
        {
            var mauiValue = MauiWrapper.Value<object>(value);
            ((Microsoft.Maui.Controls.BindableObject)this).SetValue(propertyKey, mauiValue);
        }
    }
}

#pragma warning restore CS8669
